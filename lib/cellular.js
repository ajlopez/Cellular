var cellular = (function() {    function Cell() {        this.value = 0;        this.neighbours = [];    }        function LinearAutomata(size, states, width, results) {        var cells = new Array(size);        var newvalues = new Array(size);        var nneighbours = width * 2 + 1;                for (var k = 0; k < size; k++)            cells[k] = new Cell();                    for (var k = 0; k < size; k++) {            var cell = cells[k];            for (var w = -width; w <= width; w++)                cell.neighbours[width+w] = cells[k+w] || null;        }        this.getSize = function() { return size; };        this.getStates = function() { return states; };        this.getWidth = function() { return width; };        this.getCell = function(x) { return cells[x]; };        this.setCellValue = function(x, value) { cells[x].value = value; }                function evaluateCell(cell) {                        var value = 0;            var weigth = 1;            for (var k = 0; k < nneighbours; k++) {                var neighbour = cell.neighbours[k];                                if (neighbour)                    value += neighbour.value * weigth;                                    weigth *= states;            }                        return results[value] || 0;        }                this.nextGeneration = function() {            for (var k = 0; k < size; k++)                newvalues[k] = evaluateCell(cells[k]);            for (var k = 0; k < size; k++)                cells[k].value = newvalues[k];        }    }        function createLinearAutomata(size, states, width, rule) {        var automata = new LinearAutomata(size, states, width, []);                return automata;    }        return {        createLinearAutomata: createLinearAutomata    }}());if (typeof(window) === 'undefined') {    module.exports = cellular;}